#file: noinspection UndefinedAction,UndefinedParamsPresent
name: terraform-deploy.yml
on:
  push:
    branches: [main]

permissions:
  id-token: write
  contents: read

env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_USE_OIDC: true
  TF_VAR_service_plan_name: ${{ secrets.SERVICE_PLAN_NAME }}
  TF_VAR_service_plan_rg_name: ${{ secrets.SERVICE_PLAN_RG_NAME }}
  TF_VAR_mysql_flexible_server_name: ${{ secrets.MYSQL_FLEXIBLE_SERVER_NAME }}
  TF_VAR_mysql_flexible_server_rg_name: ${{ secrets.MYSQL_FLEXIBLE_SERVER_RG_NAME }}
  TF_VAR_log_analytics_workspace_name: ${{ secrets.LOG_ANALYTICS_WORKSPACE_NAME }}
  TF_VAR_log_analytics_workspace_rg_name: ${{ secrets.LOG_ANALYTICS_WORKSPACE_RG_NAME }}
  TF_VAR_mysql_admin_username: ${{ secrets.MYSQL_ADMIN_USERNAME }}
  TF_VAR_mysql_admin_password: ${{ secrets.MYSQL_ADMIN_PASSWORD }}
  TF_VAR_canned_reports_api_key: ${{ secrets.CANNED_REPORTS_API_KEY }}
  TF_VAR_scf_refile_api_key: ${{ secrets.SCF_REFILE_API_KEY }}
  TF_VAR_api_key_interactive: ${{ secrets.API_KEY_INTERACTIVE }}
  TF_VAR_google_sheet_id: ${{ secrets.GOOGLE_SHEET_ID }}
  TF_WORKING_DIR: ./terraform

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    outputs:
      linux_web_app_service_name: ${{ steps.get_outputs.outputs.linux_web_app_service_name }}
      linux_web_app_service_stage_slot_name: ${{ steps.get_outputs.outputs.linux_web_app_service_stage_slot_name }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v5

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TF_STATE_RG }}" \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_SA }}" \
            -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
            -backend-config="key=${{ secrets.TF_STATE_KEY }}"

      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve

      - name: Get Terraform Outputs
        id: get_outputs
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          LINUX_WEB_APP_SERVICE_NAME=$(terraform output -raw linux_web_app_service_name)
          LINUX_WEB_APP_SERVICE_STAGE_SLOT_NAME=$(terraform output -raw linux_web_app_service_stage_slot_name)
          
          echo "linux_web_app_service_name=$LINUX_WEB_APP_SERVICE_NAME" >> "$GITHUB_OUTPUT"
          echo "linux_web_app_service_stage_slot_name=$LINUX_WEB_APP_SERVICE_STAGE_SLOT_NAME" >> "$GITHUB_OUTPUT"

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: terraform
    environment: staging

    env:
      LINUX_WEB_APP_SERVICE_NAME: ${{ needs.terraform.outputs.linux_web_app_service_name }}
      LINUX_WEB_APP_SERVICE_STAGE_SLOT_NAME: ${{ needs.terraform.outputs.linux_web_app_service_stage_slot_name }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v5

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Deploy to Azure
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.LINUX_WEB_APP_SERVICE_NAME }}
          slot-name: ${{ env.LINUX_WEB_APP_SERVICE_STAGE_SLOT_NAME }}
          package: .